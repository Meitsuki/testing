Python Review (w3school)

Indentations are used to indicate a block of code
Ex:
if 5 > 2:
    print("Five is greater than two!")


Comments are denoted by #
Ex:
#This is a comment

Docstrings can be one line or multiple, can be used as comments as well
Ex:
"""This is a
multiline docstring."""

Variables are declared the moment you assign a value to it, no need to declare the type
Ex:
x = 5
y = "John"

Variables can hange type on the fly as well after they've been set
Ex:
x = 4
x = "Sally"

Variables are case-sensitive

print statement is used to output, to combine text and variables use +
Ex:
print("Python is " + x)

+ is used to add a variable to another variable as well, they should be same type, cannot combine string and number when combining variables

There are three numeric types in python (int, float, complex)
Ex:
x = 1 #int
y = 2.8 #float
z = 1j #complex

You can verify the type of an object using the type() function
Ex:
print(type(x))

When you want to specify a type on a variable, you can cast using constructors (int(), float(), str())
Ex:
x = int(1)
y = float(2.8)
z = str(3.0)

Strings can be declared using either "" or '', no character type in python, single character is simply string of length 1

strip() removes any whitespace from beginning or end of a string
len() returns length of string
lower() turns string into lower case
upper() turns string into upper case
replace() replaces a string with another string
split() splits the string into substrings if it finds instances of separator

Command line input is received via input()
Ex:
print("Enter your name:")
x = input()
print("Hello, " + x)

Python Operators
Arithmetic
+ addition
- subtraction
* multiplication
/ division
% modulus
** exponentiation
// floor division

Assignment
=	x = 5 is same as x = 5
+=	x += 5 is same as x = x + 5
-=
*=
/=
%=
//=
**=
&=
|=
^=
>>=
<<=

Comparison
== equal
!= not equal
>  greater than
<  less than
>= greater than or equal to
<= less than or equal to

Logical operators
and returns true if both statements are true
or returns true if one of the statements is true
not reverse the result, returns false if the result is true

Identity operators
is returns true if both variables are the same object
is not returns true if both variables are not the same object

Membership operators
in returns true if a sequence with the specified value is present in the object
not in returns true if a sequence with the specified value is not present in the object

Bitwise operators
&  AND				Sets each bit to 1 if both bits are 1
|  OR				Sets each bit to 1 if one of two bits is 1
^  XOR				Sets each bit to 1 if only one of two bits is 1
~  NOT				Inverts all the bits
<< Zero fill left shift		Shift left by pushing zeros in from the right and let the leftmost bits fall off
>> Signed right shift		Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off

Collections (Arrays)
List is a collection which is ordered and changeable. Allows duplicate members
Ex:
thislist = ["apple", "banana", "cherry"]
thislist[1] = "blackcurrant"
thislist = list(("apple", "banana", "cherry"))
thislist.append("damson")
thislist.remove("banana")
print(len(thislist))

List Methods
append()	Adds an element at the end of the list
clear()		Removes all the elements from the list
copy()		Returns a copy of the list
count()		Returs the number of elements with the specified value
extend()	Add the elements of a list (or any iterable), to the end of the current list
index()		Returns the index of the first element with the specified value
insert()	Adds an element at the specified position
pop()		Removes the element at the specified position
remove()	Removes the first item with the specified value
reverse()	Reverses the order of the list
sort()		Sorts the list


Tuple is a collection which is ordered and unchangeable. Allows duplicate members
Ex:
thistuple = ("apple", "banana", "cherry")
print(thistuple[1])
thistuple = tuple(("apple", "banana", "cherry"))
print(len(thistuple)
Note: You cannot remove items in a tuple


Set is a collection which is unordered and unindexed. No duplicate members
Ex:
thisset = set(("apple", "banana", "cherry"))
thisset.add("damson")
thisset.remove("banana")
print(len(thisset))
Note: set list is unordered so items will appear in a random order


Dictionary is a collection which is unordered, changeable and indexed. No duplicate members
Ex:
thisdict = {
	"apple" : "green",
	"banana" : "yellow",
	"cherry" : "red"
}
thisdict["apple"] = "red"
thisdict = dict(apple="green", banana="yellow", cherry="red")
thisdict["damson"] = "purple"
del(thisdict["banana"])
print(len(thisdict))


Conditionals
if statement
Ex:
if b > a:
    print("b is greater than a")

elif statement
Ex:
if b > a:
    print("b is greater than a")
elif a == b:
    print("a and b are equal")

else statement
Ex:
if ...:
    ...
elif ...:
    ...
else:
    print("a is greater than b")

while loop
Ex:
while i < 6:
    print(i)
    i += 1

break statment can be used to stop loops even if while condition is true
Ex:
while i < 6:
    print(i)
    if i ==3:
        break
    i+=1


continue statement can stop the current iteration and continue with the next
Ex:
while i < 6:
    i += 1
    if i == 3:
        continue
    print(i)


for loop used for iterating over a sequence (that is either a list, tuple or string)
works more like iterator method in other programming languages
Ex:
for x in fruits:
    print(x)

break statment can stop the loop
Ex:
for x in fruits:
    if x == "banana":
        break
    print(x)


continue statement can stop current iteration and continue with the next
Ex:
for x in fruits:
    if x == "banana":
        continue
    print(x)

range() function can be used to loop through a set of code a specified number of times
Ex:
for x in range(6):
    print(x)

range() function defaults to 0 as staring value if no starting value is specified
for x in range(2,6):
    print(x)

range() function defaults to increment by 1 if increment value not specified
for x in range(2,30,3):
    print(x)


Recursion
defined function can call itself
Ex:
def tri_recursion(k):
    if (k > 0):
        result = k + tri_recursion(k - 1)
        print(result)
    else:
        result = 0
    return result

print("\n\nRecursion Example Results")
tri_recursion(6)


Functions are blocks of code which only runs when called
Creating a function uses the def keyword
Ex:
def my_function():
    print("Hello from a function")

Call a function
Ex:
my_function()

Parameters are used to pass information to functions
Ex:
def my_function(fname):
    print(fname + " Refsnes")

my_function("Emil")

Default parameters can be used to set a value for parameters if none are passed
Ex:
def my_function(country = "Norway"):
    print("I am from " + country)

return statements are used to have a function return a value
Ex:
def my_function(x):
    return 5 * x

Lambda functions are used to create what is known as anonymous functions, functions with no pre-defined name. Good for constructing adaptable functions, good for event handling
Ex:
myfunc = lambda i : i * 2
print(myfunc(2))
An anonymous function that returns the double value of i

lambda defined functions can have more than one defined input
Ex:
myfunc = lambda x,y : x*y
print(myfunc(3,6))

def myfunc(n):
    return lambda i : i*n

doubler = myfunc(2)
tripler = myfunc(3)
val = 11
print("Doubled: " + str(doubler(val)) + ". Tripled: " + str(tripler(val)))
myfunc creates an anonymous function that multiples variable i with variable n
create two variables doubler and tripler which are assigned to the result of myfunc passing in 2 and 3 respectively, they are assigned to the generated lambda functions


Arrays are used to store multiple values in one single variable
Python does not have built-in support for arrays but python lists can be used instead
Length of an array is always one more than the highest array index

pop() method can be used to remove an element from the array
Ex:
cars.pop(1)

remove() method only removes the first occurrence of specified value

Array Methods
append()	Adds an element at the end of the list
clear()		Removes all the elements from the list
copy()		Returns a copy of the list
count()		Returns the number of elements with the specified value
extend()	Add the elements of a list(or any iterable), to the end of the current list
index()		Returns the index of the first element with the specified value
insert()	Adds an element at the specified position
pop()		Removes the element at the specified position
remove()	Removes the first item with the specified value
reverse()	Reverses the order of the list
sort()		Sorts the list


Classes/Objects has properties and methods, class is like an object constructor or a "blueprint" for creating objects
Use the keyword class to create a class
Ex:
class MyClass:
    x = 5

p1 = MyClass()
print(p1.x)

__init__() function is executed when the class is being initiated, use it to assign values to object properties or other operations that are necessary to do when objects are being created
Ex:
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

p1 = Person("John", 36)


Objects can also contain methods. Methods in objects are functions that belongs to the object
Ex:
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def myfunc(self):
        print("Hello my name is " + self.name)

p1 = Person("John", 30)
p1.myfunc()

Note: The self parameter is a reference to the class itself, and is used to access variables that belongs to the class
It does not have to be named self, you can call it whatever you like, but it has to be the first parameter of any function in the class
Ex:
class Person:
    def __init__(mysillyobject, name, age):
        mysillyobject.name = name
        mysillyobject.age = age

    def myfunc(abc):
        print("Hello my name is " + abc.name)

p1 = Person("John", 36)
p1.myfunc()

You can modify properties on objects
Ex:
p1.age = 40

You can delete properties on objects by using the del keyword
Ex:
del p1.age

You can delete objects by using the del keyword
Ex:
del p1


Modules can be considered code libraries. A file containing a set of functions you want to include in your application
To create a module just save the code you want in a file with the file extension .py
Ex:
In a file named mymodule.py
def greeting(name):
    print("Hello, " + name

To use a module, use the import statement
Ex:
import mymodule
mymodule.greeting("Jonathan")

Modules can also contain variables of all types

You can create an alias when you import a module by using the as keyword
Ex:
import mymodule as mx
a = mx.person1["age"]
print(a)

There are several built in modules in python which you can import whenever you like
There is a built-in function to list all the function names (or variable names) in a module, the dir() function
Ex:
import platform
x = dir(platform)
print(x)

Note: The dir() function can be used on all modules, also the ones you create yourself

You can choose to import only parts from a module by using the from keyword
Ex:
from mymodule import person1
Note: When importing using the from keyword, do not use the module name when referring to elements in the module


A date in python is not a data type of its own, import module datetime to work with dates as date objects
Ex:
import datetime
x = datetime.datetime.now()
print(x)
Result contians year, month, day, hour, minute, second and microsecond

Datetime module has many methods to return information about the date object

To create a date, use the datetime() class of the datetime module
datetime() requires three parameters to create a date: year, month, day
Ex:
import datetime
x = datetime.datetime(2020, 5, 17)
print (x)

The datetime() class also takes parameters for time and timezone (hour, minute, second, microsecond, tzone) but they are optional with a default value of 0 or None for timezone

strftime() method takes one parameter (format) to specify the format of the returned string after formatting date objects into readable strings
Ex:
import datetime
x = datetime.datetime(2018, 6, 1)
print(x.strftime("%B"))

Legal format codes
%a	Weekday, short version
%A	Weekday, full version
%w	Weekday as a number 0-6, 0 is Sunday
%d	Day of month 01-31
%b	Month name, shortversion
%B	Month name, full version
%m	month as a number 01-12
%y	year, short version, without century
%Y	Year, full version
%H	Hour 00-23
%I	Hour 00-12
%p	AM/PM
%M	Minute 00-59
%S	Second 00-59
%f	Microsecond 000000-999999
%z	UTC offset
%Z	Timezone
%j	Day number of year 001-366
%U	Week number of year, Sunday as the first day of week, 00-53
%W	Week number of Year, Monday as the first day of week, 00-53
%c	Local version of date and time
%x	Local version of date
%X	Local version of time
%%	A % character


JSON is a syntax for storing and exchanging data, is text written with JavaScript object notation
Python has a built-in package called json which can be used to work with JSON data
Ex:
import json

Parse JSON, if you have a JSON string you can parse it using the json.loads() method, the result will be a python dictionary
Ex:
import json
x = '{ "name" : "John", "age" : 30, "city" : "New York" }'
y = json.loads(x)
print(y.age)

You can convert a python object into a JSON string by using the json.dumps() method
Ex:
import json
x = {
    "name" : "John",
    "age" : 30,
    "city" : "New York"
}
y = json.dumps(x)
print(y)

You can convert python objects of the following types into JSON strings:
dict	Object
list	Array
tuple	Array
str	String
int	Number
float	Number
True	true
False	false
None	null

To make the result easy to read, you can use the indent parameter
Ex:
json.dumps(x, indent=4)

You can also define the separators, default value is (", ",": "), which means using a comma and a space to separate each object, and a colon and a space to separate keys from values
Use the separators parameter to change the default separator
Ex:
json.dumps(x, indent=4, separators=(". ", " = "))

You can also use the sort_keys parameter to specify if the result should be sorted or not
Ex:
json.dumps(x, indent=5, sort_keys=True)


PIP is a package manager for Python packages or modules 
Package contains all the files you need for a module, modules are python code libraries you can include in your project
pip install packagename

Once a package is installed, it is ready to use
Ex:
import package
c = package.function()

Find packages at https://pypi.org/




